{"version":3,"file":"4.0a16185c58d6060e096e.hot-update.js","sources":["webpack:///pages/index.js"],"sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport _ from 'lodash'\nconst movies = require(\"../imdb_result.json\")\n\nexport default class Index extends React.Component {\n  static async getInitialProps () {\n    // eslint-disable-next-line no-undef\n    const reviewed_moviews = movies.filter(m => m.imdbRating !== 'N/A')\n    const sorted_movies = _.sortBy(reviewed_moviews, ['imdbRating','imdbVotes']).reverse();\n    return { data: sorted_movies}\n  }\n\n  render () {\n    return (\n      <React.Fragment>\n        <style jsx>{`\n          div.container {\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 10px;\n          }\n          @media (min-width: 600px) {\n            div.container {\n              flex-direction: row;\n            }\n            div.poster {\n              margin-right: 10px;\n            }\n          }\n        `}</style>\n        <h1>MIFF - IMDB Ratings</h1>\n        {this.props.data.map((d,i) =>\n          <div className=\"container\" key={i}>\n            <div className=\"poster\" style={{ flex: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center'}}>\n              <img src={d.Poster} style={{ display:'block', width: '100%', height: 'auto'}} />\n            </div>\n            <div style={{ flex: 3}}>\n              <h1>{d.Title}</h1>\n              <p style={{fontSize: 18, fontWeight: 500}}>{d.imdbRating} out of {d.imdbVotes} votes</p>\n              <div>\n                <span>{d.Director}</span> / <span>{d.Released}</span>\n              </div>\n              <p>\n                <span>IMDB link: </span>\n                <a href={`https://www.imdb.com/title/${d.imdbID}`}>{d.imdbID}</a>\n              </p>\n              <p>{d.Plot}</p>\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgfA;AAqBA;;;;;;;;;;;;AA9CA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AANA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}